-- The C compiler identification is GNU 9.4.0
-- The CXX compiler identification is GNU 9.4.0
-- Check for working C compiler: /usr/bin/cc
-- Check for working C compiler: /usr/bin/cc -- works
-- Detecting C compiler ABI info
-- Detecting C compiler ABI info - done
-- Detecting C compile features
-- Detecting C compile features - done
-- Check for working CXX compiler: /usr/bin/c++
-- Check for working CXX compiler: /usr/bin/c++ -- works
-- Detecting CXX compiler ABI info
-- Detecting CXX compiler ABI info - done
-- Detecting CXX compile features
-- Detecting CXX compile features - done
-- Found ament_cmake: 1.1.6 (/opt/ros/galactic/share/ament_cmake/cmake)
-- Found PythonInterp: /usr/bin/python3 (found suitable version "3.8.10", minimum required is "3") 
-- Using PYTHON_EXECUTABLE: /usr/bin/python3
-- Override CMake install command with custom implementation using symlinks instead of copying resources
-- Found dynamixel_sdk: 3.7.40 (/home/kyle/testWS/install/dynamixel_sdk/share/dynamixel_sdk/cmake)
-- Found geometry_msgs: 2.2.4 (/opt/ros/galactic/share/geometry_msgs/cmake)
-- Using all available rosidl_typesupport_c: rosidl_typesupport_fastrtps_c;rosidl_typesupport_introspection_c
-- Found rosidl_adapter: 2.2.3 (/opt/ros/galactic/share/rosidl_adapter/cmake)
-- Found OpenSSL: /usr/lib/x86_64-linux-gnu/libcrypto.so (found version "1.1.1f")  
-- Found FastRTPS: /opt/ros/galactic/include  
-- Using all available rosidl_typesupport_cpp: rosidl_typesupport_fastrtps_cpp;rosidl_typesupport_introspection_cpp
-- Found message_filters: 3.2.6 (/opt/ros/galactic/share/message_filters/cmake)
-- Found rmw_implementation_cmake: 3.3.1 (/opt/ros/galactic/share/rmw_implementation_cmake/cmake)
-- Found rmw_cyclonedds_cpp: 0.22.6 (/opt/ros/galactic/share/rmw_cyclonedds_cpp/cmake)
-- Using RMW implementation 'rmw_cyclonedds_cpp' as default
-- Looking for pthread.h
-- Looking for pthread.h - found
-- Performing Test CMAKE_HAVE_LIBC_PTHREAD
-- Performing Test CMAKE_HAVE_LIBC_PTHREAD - Failed
-- Looking for pthread_create in pthreads
-- Looking for pthread_create in pthreads - not found
-- Looking for pthread_create in pthread
-- Looking for pthread_create in pthread - found
-- Found Threads: TRUE  
-- Found nav_msgs: 2.2.4 (/opt/ros/galactic/share/nav_msgs/cmake)
-- Found sensor_msgs: 2.2.4 (/opt/ros/galactic/share/sensor_msgs/cmake)
-- Found std_srvs: 2.2.4 (/opt/ros/galactic/share/std_srvs/cmake)
-- Found tf2: 0.17.5 (/opt/ros/galactic/share/tf2/cmake)
-- Found tf2_ros: 0.17.5 (/opt/ros/galactic/share/tf2_ros/cmake)
-- Found turtlebot3_msgs: 2.2.1 (/home/kyle/testWS/install/turtlebot3_msgs/share/turtlebot3_msgs/cmake)
-- Configuring done
-- Generating done
-- Build files have been written to: /home/kyle/testWS/build/turtlebot3_node
[35m[1mScanning dependencies of target turtlebot3_node_lib[0m
[  7%] [32mBuilding CXX object CMakeFiles/turtlebot3_node_lib.dir/src/devices/motor_power.cpp.o[0m
[ 14%] [32mBuilding CXX object CMakeFiles/turtlebot3_node_lib.dir/src/devices/sound.cpp.o[0m
[ 21%] [32mBuilding CXX object CMakeFiles/turtlebot3_node_lib.dir/src/diff_drive_controller.cpp.o[0m
[ 28%] [32mBuilding CXX object CMakeFiles/turtlebot3_node_lib.dir/src/devices/reset.cpp.o[0m
[ 42%] [32mBuilding CXX object CMakeFiles/turtlebot3_node_lib.dir/src/dynamixel_sdk_wrapper.cpp.o[0m
[ 42%] [32mBuilding CXX object CMakeFiles/turtlebot3_node_lib.dir/src/odometry.cpp.o[0m
[ 50%] [32mBuilding CXX object CMakeFiles/turtlebot3_node_lib.dir/src/sensors/battery_state.cpp.o[0m
[ 57%] [32mBuilding CXX object CMakeFiles/turtlebot3_node_lib.dir/src/sensors/imu.cpp.o[0m
[ 64%] [32mBuilding CXX object CMakeFiles/turtlebot3_node_lib.dir/src/turtlebot3.cpp.o[0m
[ 71%] [32mBuilding CXX object CMakeFiles/turtlebot3_node_lib.dir/src/sensors/joint_state.cpp.o[0m
[ 78%] [32mBuilding CXX object CMakeFiles/turtlebot3_node_lib.dir/src/sensors/sensor_state.cpp.o[0m
[01m[K/home/kyle/testWS/src/turtlebot3/turtlebot3/turtlebot3_node/src/odometry.cpp:[m[K In constructor â€˜[01m[Krobotis::turtlebot3::Odometry::Odometry(std::shared_ptr<rclcpp::Node>&, double, double)[m[Kâ€™:
[01m[K/home/kyle/testWS/src/turtlebot3/turtlebot3/turtlebot3_node/src/odometry.cpp:39:45:[m[K [01;35m[Kwarning: [m[Kâ€˜[01m[Kconst rclcpp::ParameterValue& rclcpp::Node::declare_parameter(const string&)[m[Kâ€™ is deprecated: declare_parameter() with only a name is deprecated and will be deleted in the future.\nIf you want to declare a parameter that won't change type without a default value use:\n`node->declare_parameter<ParameterT>(name)`, where e.g. ParameterT=int64_t.\n\nIf you want to declare a parameter that can dynamically change type use:\n```\nrcl_interfaces::msg::ParameterDescriptor descriptor;\ndescriptor.dynamic_typing = true;\nnode->declare_parameter(name, rclcpp::ParameterValue{}, descriptor);\n``` [[01;35m[K-Wdeprecated-declarations[m[K]
   39 |   nh_->declare_parameter("odometry.frame_id"[01;35m[K)[m[K;
      |                                             [01;35m[K^[m[K
In file included from [01m[K/opt/ros/galactic/include/rclcpp/executors/single_threaded_executor.hpp:28[m[K,
                 from [01m[K/opt/ros/galactic/include/rclcpp/executors.hpp:22[m[K,
                 from [01m[K/opt/ros/galactic/include/rclcpp/rclcpp.hpp:156[m[K,
                 from [01m[K/opt/ros/galactic/include/message_filters/subscriber.h:38[m[K,
                 from [01m[K/home/kyle/testWS/src/turtlebot3/turtlebot3/turtlebot3_node/include/turtlebot3_node/odometry.hpp:21[m[K,
                 from [01m[K/home/kyle/testWS/src/turtlebot3/turtlebot3/turtlebot3_node/src/odometry.cpp:17[m[K:
[01m[K/opt/ros/galactic/include/rclcpp/node.hpp:422:3:[m[K [01;36m[Knote: [m[Kdeclared here
  422 |   [01;36m[Kdeclare_parameter[m[K(const std::string & name);
      |   [01;36m[K^~~~~~~~~~~~~~~~~[m[K
[01m[K/home/kyle/testWS/src/turtlebot3/turtlebot3/turtlebot3_node/src/odometry.cpp:40:51:[m[K [01;35m[Kwarning: [m[Kâ€˜[01m[Kconst rclcpp::ParameterValue& rclcpp::Node::declare_parameter(const string&)[m[Kâ€™ is deprecated: declare_parameter() with only a name is deprecated and will be deleted in the future.\nIf you want to declare a parameter that won't change type without a default value use:\n`node->declare_parameter<ParameterT>(name)`, where e.g. ParameterT=int64_t.\n\nIf you want to declare a parameter that can dynamically change type use:\n```\nrcl_interfaces::msg::ParameterDescriptor descriptor;\ndescriptor.dynamic_typing = true;\nnode->declare_parameter(name, rclcpp::ParameterValue{}, descriptor);\n``` [[01;35m[K-Wdeprecated-declarations[m[K]
   40 |   nh_->declare_parameter("odometry.child_frame_id"[01;35m[K)[m[K;
      |                                                   [01;35m[K^[m[K
In file included from [01m[K/opt/ros/galactic/include/rclcpp/executors/single_threaded_executor.hpp:28[m[K,
                 from [01m[K/opt/ros/galactic/include/rclcpp/executors.hpp:22[m[K,
                 from [01m[K/opt/ros/galactic/include/rclcpp/rclcpp.hpp:156[m[K,
                 from [01m[K/opt/ros/galactic/include/message_filters/subscriber.h:38[m[K,
                 from [01m[K/home/kyle/testWS/src/turtlebot3/turtlebot3/turtlebot3_node/include/turtlebot3_node/odometry.hpp:21[m[K,
                 from [01m[K/home/kyle/testWS/src/turtlebot3/turtlebot3/turtlebot3_node/src/odometry.cpp:17[m[K:
[01m[K/opt/ros/galactic/include/rclcpp/node.hpp:422:3:[m[K [01;36m[Knote: [m[Kdeclared here
  422 |   [01;36m[Kdeclare_parameter[m[K(const std::string & name);
      |   [01;36m[K^~~~~~~~~~~~~~~~~[m[K
[01m[K/home/kyle/testWS/src/turtlebot3/turtlebot3/turtlebot3_node/src/odometry.cpp:42:44:[m[K [01;35m[Kwarning: [m[Kâ€˜[01m[Kconst rclcpp::ParameterValue& rclcpp::Node::declare_parameter(const string&)[m[Kâ€™ is deprecated: declare_parameter() with only a name is deprecated and will be deleted in the future.\nIf you want to declare a parameter that won't change type without a default value use:\n`node->declare_parameter<ParameterT>(name)`, where e.g. ParameterT=int64_t.\n\nIf you want to declare a parameter that can dynamically change type use:\n```\nrcl_interfaces::msg::ParameterDescriptor descriptor;\ndescriptor.dynamic_typing = true;\nnode->declare_parameter(name, rclcpp::ParameterValue{}, descriptor);\n``` [[01;35m[K-Wdeprecated-declarations[m[K]
   42 |   nh_->declare_parameter("odometry.use_imu"[01;35m[K)[m[K;
      |                                            [01;35m[K^[m[K
In file included from [01m[K/opt/ros/galactic/include/rclcpp/executors/single_threaded_executor.hpp:28[m[K,
                 from [01m[K/opt/ros/galactic/include/rclcpp/executors.hpp:22[m[K,
                 from [01m[K/opt/ros/galactic/include/rclcpp/rclcpp.hpp:156[m[K,
                 from [01m[K/opt/ros/galactic/include/message_filters/subscriber.h:38[m[K,
                 from [01m[K/home/kyle/testWS/src/turtlebot3/turtlebot3/turtlebot3_node/include/turtlebot3_node/odometry.hpp:21[m[K,
                 from [01m[K/home/kyle/testWS/src/turtlebot3/turtlebot3/turtlebot3_node/src/odometry.cpp:17[m[K:
[01m[K/opt/ros/galactic/include/rclcpp/node.hpp:422:3:[m[K [01;36m[Knote: [m[Kdeclared here
  422 |   [01;36m[Kdeclare_parameter[m[K(const std::string & name);
      |   [01;36m[K^~~~~~~~~~~~~~~~~[m[K
[01m[K/home/kyle/testWS/src/turtlebot3/turtlebot3/turtlebot3_node/src/odometry.cpp:43:47:[m[K [01;35m[Kwarning: [m[Kâ€˜[01m[Kconst rclcpp::ParameterValue& rclcpp::Node::declare_parameter(const string&)[m[Kâ€™ is deprecated: declare_parameter() with only a name is deprecated and will be deleted in the future.\nIf you want to declare a parameter that won't change type without a default value use:\n`node->declare_parameter<ParameterT>(name)`, where e.g. ParameterT=int64_t.\n\nIf you want to declare a parameter that can dynamically change type use:\n```\nrcl_interfaces::msg::ParameterDescriptor descriptor;\ndescriptor.dynamic_typing = true;\nnode->declare_parameter(name, rclcpp::ParameterValue{}, descriptor);\n``` [[01;35m[K-Wdeprecated-declarations[m[K]
   43 |   nh_->declare_parameter("odometry.publish_tf"[01;35m[K)[m[K;
      |                                               [01;35m[K^[m[K
In file included from [01m[K/opt/ros/galactic/include/rclcpp/executors/single_threaded_executor.hpp:28[m[K,
                 from [01m[K/opt/ros/galactic/include/rclcpp/executors.hpp:22[m[K,
                 from [01m[K/opt/ros/galactic/include/rclcpp/rclcpp.hpp:156[m[K,
                 from [01m[K/opt/ros/galactic/include/message_filters/subscriber.h:38[m[K,
                 from [01m[K/home/kyle/testWS/src/turtlebot3/turtlebot3/turtlebot3_node/include/turtlebot3_node/odometry.hpp:21[m[K,
                 from [01m[K/home/kyle/testWS/src/turtlebot3/turtlebot3/turtlebot3_node/src/odometry.cpp:17[m[K:
[01m[K/opt/ros/galactic/include/rclcpp/node.hpp:422:3:[m[K [01;36m[Knote: [m[Kdeclared here
  422 |   [01;36m[Kdeclare_parameter[m[K(const std::string & name);
      |   [01;36m[K^~~~~~~~~~~~~~~~~[m[K
[01m[K/home/kyle/testWS/src/turtlebot3/turtlebot3/turtlebot3_node/src/odometry.cpp:[m[K In member function â€˜[01m[Kvoid robotis::turtlebot3::Odometry::joint_state_callback(sensor_msgs::msg::JointState_<std::allocator<void> >::SharedPtr)[m[Kâ€™:
[01m[K/home/kyle/testWS/src/turtlebot3/turtlebot3/turtlebot3_node/src/odometry.cpp:112:92:[m[K [01;35m[Kwarning: [m[Kâ€˜[01m[Krclcpp::Duration::Duration(rcl_duration_value_t)[m[Kâ€™ is deprecated: Use Duration::from_nanoseconds instead or std::chrono_literals. For example:rclcpp::Duration::from_nanoseconds(int64_variable);rclcpp::Duration(0ns); [[01;35m[K-Wdeprecated-declarations[m[K]
  112 |   rclcpp::Duration duration(joint_state_msg->header.stamp.nanosec - last_time.nanoseconds()[01;35m[K)[m[K;
      |                                                                                            [01;35m[K^[m[K
In file included from [01m[K/opt/ros/galactic/include/rclcpp/qos.hpp:20[m[K,
                 from [01m[K/opt/ros/galactic/include/rclcpp/node_interfaces/node_graph_interface.hpp:31[m[K,
                 from [01m[K/opt/ros/galactic/include/rclcpp/client.hpp:34[m[K,
                 from [01m[K/opt/ros/galactic/include/rclcpp/callback_group.hpp:23[m[K,
                 from [01m[K/opt/ros/galactic/include/rclcpp/any_executable.hpp:20[m[K,
                 from [01m[K/opt/ros/galactic/include/rclcpp/memory_strategy.hpp:25[m[K,
                 from [01m[K/opt/ros/galactic/include/rclcpp/memory_strategies.hpp:18[m[K,
                 from [01m[K/opt/ros/galactic/include/rclcpp/executor_options.hpp:20[m[K,
                 from [01m[K/opt/ros/galactic/include/rclcpp/executor.hpp:36[m[K,
                 from [01m[K/opt/ros/galactic/include/rclcpp/executors/multi_threaded_executor.hpp:26[m[K,
                 from [01m[K/opt/ros/galactic/include/rclcpp/executors.hpp:21[m[K,
                 from [01m[K/opt/ros/galactic/include/rclcpp/rclcpp.hpp:156[m[K,
                 from [01m[K/opt/ros/galactic/include/message_filters/subscriber.h:38[m[K,
                 from [01m[K/home/kyle/testWS/src/turtlebot3/turtlebot3/turtlebot3_node/include/turtlebot3_node/odometry.hpp:21[m[K,
                 from [01m[K/home/kyle/testWS/src/turtlebot3/turtlebot3/turtlebot3_node/src/odometry.cpp:17[m[K:
[01m[K/opt/ros/galactic/include/rclcpp/duration.hpp:46:12:[m[K [01;36m[Knote: [m[Kdeclared here
   46 |   explicit [01;36m[KDuration[m[K(rcl_duration_value_t nanoseconds);
      |            [01;36m[K^~~~~~~~[m[K
[01m[K/home/kyle/testWS/src/turtlebot3/turtlebot3/turtlebot3_node/src/odometry.cpp:[m[K In member function â€˜[01m[Kvoid robotis::turtlebot3::Odometry::joint_state_and_imu_callback(const std::shared_ptr<const sensor_msgs::msg::JointState_<std::allocator<void> > >&, const std::shared_ptr<const sensor_msgs::msg::Imu_<std::allocator<void> > >&)[m[Kâ€™:
[01m[K/home/kyle/testWS/src/turtlebot3/turtlebot3/turtlebot3_node/src/odometry.cpp:132:92:[m[K [01;35m[Kwarning: [m[Kâ€˜[01m[Krclcpp::Duration::Duration(rcl_duration_value_t)[m[Kâ€™ is deprecated: Use Duration::from_nanoseconds instead or std::chrono_literals. For example:rclcpp::Duration::from_nanoseconds(int64_variable);rclcpp::Duration(0ns); [[01;35m[K-Wdeprecated-declarations[m[K]
  132 |   rclcpp::Duration duration(joint_state_msg->header.stamp.nanosec - last_time.nanoseconds()[01;35m[K)[m[K;
      |                                                                                            [01;35m[K^[m[K
In file included from [01m[K/opt/ros/galactic/include/rclcpp/qos.hpp:20[m[K,
                 from [01m[K/opt/ros/galactic/include/rclcpp/node_interfaces/node_graph_interface.hpp:31[m[K,
                 from [01m[K/opt/ros/galactic/include/rclcpp/client.hpp:34[m[K,
                 from [01m[K/opt/ros/galactic/include/rclcpp/callback_group.hpp:23[m[K,
                 from [01m[K/opt/ros/galactic/include/rclcpp/any_executable.hpp:20[m[K,
                 from [01m[K/opt/ros/galactic/include/rclcpp/memory_strategy.hpp:25[m[K,
                 from [01m[K/opt/ros/galactic/include/rclcpp/memory_strategies.hpp:18[m[K,
                 from [01m[K/opt/ros/galactic/include/rclcpp/executor_options.hpp:20[m[K,
                 from [01m[K/opt/ros/galactic/include/rclcpp/executor.hpp:36[m[K,
                 from [01m[K/opt/ros/galactic/include/rclcpp/executors/multi_threaded_executor.hpp:26[m[K,
                 from [01m[K/opt/ros/galactic/include/rclcpp/executors.hpp:21[m[K,
                 from [01m[K/opt/ros/galactic/include/rclcpp/rclcpp.hpp:156[m[K,
                 from [01m[K/opt/ros/galactic/include/message_filters/subscriber.h:38[m[K,
                 from [01m[K/home/kyle/testWS/src/turtlebot3/turtlebot3/turtlebot3_node/include/turtlebot3_node/odometry.hpp:21[m[K,
                 from [01m[K/home/kyle/testWS/src/turtlebot3/turtlebot3/turtlebot3_node/src/odometry.cpp:17[m[K:
[01m[K/opt/ros/galactic/include/rclcpp/duration.hpp:46:12:[m[K [01;36m[Knote: [m[Kdeclared here
   46 |   explicit [01;36m[KDuration[m[K(rcl_duration_value_t nanoseconds);
      |            [01;36m[K^~~~~~~~[m[K
[01m[K/home/kyle/testWS/src/turtlebot3/turtlebot3/turtlebot3_node/src/turtlebot3.cpp:[m[K In member function â€˜[01m[Kvoid robotis::turtlebot3::TurtleBot3::init_dynamixel_sdk_wrapper(const string&)[m[Kâ€™:
[01m[K/home/kyle/testWS/src/turtlebot3/turtlebot3/turtlebot3_node/src/turtlebot3.cpp:56:38:[m[K [01;35m[Kwarning: [m[Kâ€˜[01m[Kconst rclcpp::ParameterValue& rclcpp::Node::declare_parameter(const string&)[m[Kâ€™ is deprecated: declare_parameter() with only a name is deprecated and will be deleted in the future.\nIf you want to declare a parameter that won't change type without a default value use:\n`node->declare_parameter<ParameterT>(name)`, where e.g. ParameterT=int64_t.\n\nIf you want to declare a parameter that can dynamically change type use:\n```\nrcl_interfaces::msg::ParameterDescriptor descriptor;\ndescriptor.dynamic_typing = true;\nnode->declare_parameter(name, rclcpp::ParameterValue{}, descriptor);\n``` [[01;35m[K-Wdeprecated-declarations[m[K]
   56 |   this->declare_parameter("opencr.id"[01;35m[K)[m[K;
      |                                      [01;35m[K^[m[K
In file included from [01m[K/opt/ros/galactic/include/rclcpp/executors/single_threaded_executor.hpp:28[m[K,
                 from [01m[K/opt/ros/galactic/include/rclcpp/executors.hpp:22[m[K,
                 from [01m[K/opt/ros/galactic/include/rclcpp/rclcpp.hpp:156[m[K,
                 from [01m[K/home/kyle/testWS/src/turtlebot3/turtlebot3/turtlebot3_node/include/turtlebot3_node/turtlebot3.hpp:22[m[K,
                 from [01m[K/home/kyle/testWS/src/turtlebot3/turtlebot3/turtlebot3_node/src/turtlebot3.cpp:17[m[K:
[01m[K/opt/ros/galactic/include/rclcpp/node.hpp:422:3:[m[K [01;36m[Knote: [m[Kdeclared here
  422 |   [01;36m[Kdeclare_parameter[m[K(const std::string & name);
      |   [01;36m[K^~~~~~~~~~~~~~~~~[m[K
[01m[K/home/kyle/testWS/src/turtlebot3/turtlebot3/turtlebot3_node/src/turtlebot3.cpp:57:45:[m[K [01;35m[Kwarning: [m[Kâ€˜[01m[Kconst rclcpp::ParameterValue& rclcpp::Node::declare_parameter(const string&)[m[Kâ€™ is deprecated: declare_parameter() with only a name is deprecated and will be deleted in the future.\nIf you want to declare a parameter that won't change type without a default value use:\n`node->declare_parameter<ParameterT>(name)`, where e.g. ParameterT=int64_t.\n\nIf you want to declare a parameter that can dynamically change type use:\n```\nrcl_interfaces::msg::ParameterDescriptor descriptor;\ndescriptor.dynamic_typing = true;\nnode->declare_parameter(name, rclcpp::ParameterValue{}, descriptor);\n``` [[01;35m[K-Wdeprecated-declarations[m[K]
   57 |   this->declare_parameter("opencr.baud_rate"[01;35m[K)[m[K;
      |                                             [01;35m[K^[m[K
In file included from [01m[K/opt/ros/galactic/include/rclcpp/executors/single_threaded_executor.hpp:28[m[K,
                 from [01m[K/opt/ros/galactic/include/rclcpp/executors.hpp:22[m[K,
                 from [01m[K/opt/ros/galactic/include/rclcpp/rclcpp.hpp:156[m[K,
                 from [01m[K/home/kyle/testWS/src/turtlebot3/turtlebot3/turtlebot3_node/include/turtlebot3_node/turtlebot3.hpp:22[m[K,
                 from [01m[K/home/kyle/testWS/src/turtlebot3/turtlebot3/turtlebot3_node/src/turtlebot3.cpp:17[m[K:
[01m[K/opt/ros/galactic/include/rclcpp/node.hpp:422:3:[m[K [01;36m[Knote: [m[Kdeclared here
  422 |   [01;36m[Kdeclare_parameter[m[K(const std::string & name);
      |   [01;36m[K^~~~~~~~~~~~~~~~~[m[K
[01m[K/home/kyle/testWS/src/turtlebot3/turtlebot3/turtlebot3_node/src/turtlebot3.cpp:58:52:[m[K [01;35m[Kwarning: [m[Kâ€˜[01m[Kconst rclcpp::ParameterValue& rclcpp::Node::declare_parameter(const string&)[m[Kâ€™ is deprecated: declare_parameter() with only a name is deprecated and will be deleted in the future.\nIf you want to declare a parameter that won't change type without a default value use:\n`node->declare_parameter<ParameterT>(name)`, where e.g. ParameterT=int64_t.\n\nIf you want to declare a parameter that can dynamically change type use:\n```\nrcl_interfaces::msg::ParameterDescriptor descriptor;\ndescriptor.dynamic_typing = true;\nnode->declare_parameter(name, rclcpp::ParameterValue{}, descriptor);\n``` [[01;35m[K-Wdeprecated-declarations[m[K]
   58 |   this->declare_parameter("opencr.protocol_version"[01;35m[K)[m[K;
      |                                                    [01;35m[K^[m[K
In file included from [01m[K/opt/ros/galactic/include/rclcpp/executors/single_threaded_executor.hpp:28[m[K,
                 from [01m[K/opt/ros/galactic/include/rclcpp/executors.hpp:22[m[K,
                 from [01m[K/opt/ros/galactic/include/rclcpp/rclcpp.hpp:156[m[K,
                 from [01m[K/home/kyle/testWS/src/turtlebot3/turtlebot3/turtlebot3_node/include/turtlebot3_node/turtlebot3.hpp:22[m[K,
                 from [01m[K/home/kyle/testWS/src/turtlebot3/turtlebot3/turtlebot3_node/src/turtlebot3.cpp:17[m[K:
[01m[K/opt/ros/galactic/include/rclcpp/node.hpp:422:3:[m[K [01;36m[Knote: [m[Kdeclared here
  422 |   [01;36m[Kdeclare_parameter[m[K(const std::string & name);
      |   [01;36m[K^~~~~~~~~~~~~~~~~[m[K
[01m[K/home/kyle/testWS/src/turtlebot3/turtlebot3/turtlebot3_node/src/turtlebot3.cpp:[m[K In member function â€˜[01m[Kvoid robotis::turtlebot3::TurtleBot3::add_motors()[m[Kâ€™:
[01m[K/home/kyle/testWS/src/turtlebot3/turtlebot3/turtlebot3_node/src/turtlebot3.cpp:116:65:[m[K [01;35m[Kwarning: [m[Kâ€˜[01m[Kconst rclcpp::ParameterValue& rclcpp::Node::declare_parameter(const string&)[m[Kâ€™ is deprecated: declare_parameter() with only a name is deprecated and will be deleted in the future.\nIf you want to declare a parameter that won't change type without a default value use:\n`node->declare_parameter<ParameterT>(name)`, where e.g. ParameterT=int64_t.\n\nIf you want to declare a parameter that can dynamically change type use:\n```\nrcl_interfaces::msg::ParameterDescriptor descriptor;\ndescriptor.dynamic_typing = true;\nnode->declare_parameter(name, rclcpp::ParameterValue{}, descriptor);\n``` [[01;35m[K-Wdeprecated-declarations[m[K]
  116 |   this->declare_parameter("motors.profile_acceleration_constant"[01;35m[K)[m[K;
      |                                                                 [01;35m[K^[m[K
In file included from [01m[K/opt/ros/galactic/include/rclcpp/executors/single_threaded_executor.hpp:28[m[K,
                 from [01m[K/opt/ros/galactic/include/rclcpp/executors.hpp:22[m[K,
                 from [01m[K/opt/ros/galactic/include/rclcpp/rclcpp.hpp:156[m[K,
                 from [01m[K/home/kyle/testWS/src/turtlebot3/turtlebot3/turtlebot3_node/include/turtlebot3_node/turtlebot3.hpp:22[m[K,
                 from [01m[K/home/kyle/testWS/src/turtlebot3/turtlebot3/turtlebot3_node/src/turtlebot3.cpp:17[m[K:
[01m[K/opt/ros/galactic/include/rclcpp/node.hpp:422:3:[m[K [01;36m[Knote: [m[Kdeclared here
  422 |   [01;36m[Kdeclare_parameter[m[K(const std::string & name);
      |   [01;36m[K^~~~~~~~~~~~~~~~~[m[K
[01m[K/home/kyle/testWS/src/turtlebot3/turtlebot3/turtlebot3_node/src/turtlebot3.cpp:117:56:[m[K [01;35m[Kwarning: [m[Kâ€˜[01m[Kconst rclcpp::ParameterValue& rclcpp::Node::declare_parameter(const string&)[m[Kâ€™ is deprecated: declare_parameter() with only a name is deprecated and will be deleted in the future.\nIf you want to declare a parameter that won't change type without a default value use:\n`node->declare_parameter<ParameterT>(name)`, where e.g. ParameterT=int64_t.\n\nIf you want to declare a parameter that can dynamically change type use:\n```\nrcl_interfaces::msg::ParameterDescriptor descriptor;\ndescriptor.dynamic_typing = true;\nnode->declare_parameter(name, rclcpp::ParameterValue{}, descriptor);\n``` [[01;35m[K-Wdeprecated-declarations[m[K]
  117 |   this->declare_parameter("motors.profile_acceleration"[01;35m[K)[m[K;
      |                                                        [01;35m[K^[m[K
In file included from [01m[K/opt/ros/galactic/include/rclcpp/executors/single_threaded_executor.hpp:28[m[K,
                 from [01m[K/opt/ros/galactic/include/rclcpp/executors.hpp:22[m[K,
                 from [01m[K/opt/ros/galactic/include/rclcpp/rclcpp.hpp:156[m[K,
                 from [01m[K/home/kyle/testWS/src/turtlebot3/turtlebot3/turtlebot3_node/include/turtlebot3_node/turtlebot3.hpp:22[m[K,
                 from [01m[K/home/kyle/testWS/src/turtlebot3/turtlebot3/turtlebot3_node/src/turtlebot3.cpp:17[m[K:
[01m[K/opt/ros/galactic/include/rclcpp/node.hpp:422:3:[m[K [01;36m[Knote: [m[Kdeclared here
  422 |   [01;36m[Kdeclare_parameter[m[K(const std::string & name);
      |   [01;36m[K^~~~~~~~~~~~~~~~~[m[K
[01m[K/home/kyle/testWS/src/turtlebot3/turtlebot3/turtlebot3_node/src/turtlebot3.cpp:[m[K In member function â€˜[01m[Kvoid robotis::turtlebot3::TurtleBot3::add_wheels()[m[Kâ€™:
[01m[K/home/kyle/testWS/src/turtlebot3/turtlebot3/turtlebot3_node/src/turtlebot3.cpp:134:46:[m[K [01;35m[Kwarning: [m[Kâ€˜[01m[Kconst rclcpp::ParameterValue& rclcpp::Node::declare_parameter(const string&)[m[Kâ€™ is deprecated: declare_parameter() with only a name is deprecated and will be deleted in the future.\nIf you want to declare a parameter that won't change type without a default value use:\n`node->declare_parameter<ParameterT>(name)`, where e.g. ParameterT=int64_t.\n\nIf you want to declare a parameter that can dynamically change type use:\n```\nrcl_interfaces::msg::ParameterDescriptor descriptor;\ndescriptor.dynamic_typing = true;\nnode->declare_parameter(name, rclcpp::ParameterValue{}, descriptor);\n``` [[01;35m[K-Wdeprecated-declarations[m[K]
  134 |   this->declare_parameter("wheels.separation"[01;35m[K)[m[K;
      |                                              [01;35m[K^[m[K
In file included from [01m[K/opt/ros/galactic/include/rclcpp/executors/single_threaded_executor.hpp:28[m[K,
                 from [01m[K/opt/ros/galactic/include/rclcpp/executors.hpp:22[m[K,
                 from [01m[K/opt/ros/galactic/include/rclcpp/rclcpp.hpp:156[m[K,
                 from [01m[K/home/kyle/testWS/src/turtlebot3/turtlebot3/turtlebot3_node/include/turtlebot3_node/turtlebot3.hpp:22[m[K,
                 from [01m[K/home/kyle/testWS/src/turtlebot3/turtlebot3/turtlebot3_node/src/turtlebot3.cpp:17[m[K:
[01m[K/opt/ros/galactic/include/rclcpp/node.hpp:422:3:[m[K [01;36m[Knote: [m[Kdeclared here
  422 |   [01;36m[Kdeclare_parameter[m[K(const std::string & name);
      |   [01;36m[K^~~~~~~~~~~~~~~~~[m[K
[01m[K/home/kyle/testWS/src/turtlebot3/turtlebot3/turtlebot3_node/src/turtlebot3.cpp:135:42:[m[K [01;35m[Kwarning: [m[Kâ€˜[01m[Kconst rclcpp::ParameterValue& rclcpp::Node::declare_parameter(const string&)[m[Kâ€™ is deprecated: declare_parameter() with only a name is deprecated and will be deleted in the future.\nIf you want to declare a parameter that won't change type without a default value use:\n`node->declare_parameter<ParameterT>(name)`, where e.g. ParameterT=int64_t.\n\nIf you want to declare a parameter that can dynamically change type use:\n```\nrcl_interfaces::msg::ParameterDescriptor descriptor;\ndescriptor.dynamic_typing = true;\nnode->declare_parameter(name, rclcpp::ParameterValue{}, descriptor);\n``` [[01;35m[K-Wdeprecated-declarations[m[K]
  135 |   this->declare_parameter("wheels.radius"[01;35m[K)[m[K;
      |                                          [01;35m[K^[m[K
In file included from [01m[K/opt/ros/galactic/include/rclcpp/executors/single_threaded_executor.hpp:28[m[K,
                 from [01m[K/opt/ros/galactic/include/rclcpp/executors.hpp:22[m[K,
                 from [01m[K/opt/ros/galactic/include/rclcpp/rclcpp.hpp:156[m[K,
                 from [01m[K/home/kyle/testWS/src/turtlebot3/turtlebot3/turtlebot3_node/include/turtlebot3_node/turtlebot3.hpp:22[m[K,
                 from [01m[K/home/kyle/testWS/src/turtlebot3/turtlebot3/turtlebot3_node/src/turtlebot3.cpp:17[m[K:
[01m[K/opt/ros/galactic/include/rclcpp/node.hpp:422:3:[m[K [01;36m[Knote: [m[Kdeclared here
  422 |   [01;36m[Kdeclare_parameter[m[K(const std::string & name);
      |   [01;36m[K^~~~~~~~~~~~~~~~~[m[K
[01m[K/home/kyle/testWS/src/turtlebot3/turtlebot3/turtlebot3_node/src/turtlebot3.cpp:[m[K In member function â€˜[01m[Kvoid robotis::turtlebot3::TurtleBot3::add_sensors()[m[Kâ€™:
[01m[K/home/kyle/testWS/src/turtlebot3/turtlebot3/turtlebot3_node/src/turtlebot3.cpp:145:45:[m[K [01;35m[Kwarning: [m[Kâ€˜[01m[Kconst rclcpp::ParameterValue& rclcpp::Node::declare_parameter(const string&)[m[Kâ€™ is deprecated: declare_parameter() with only a name is deprecated and will be deleted in the future.\nIf you want to declare a parameter that won't change type without a default value use:\n`node->declare_parameter<ParameterT>(name)`, where e.g. ParameterT=int64_t.\n\nIf you want to declare a parameter that can dynamically change type use:\n```\nrcl_interfaces::msg::ParameterDescriptor descriptor;\ndescriptor.dynamic_typing = true;\nnode->declare_parameter(name, rclcpp::ParameterValue{}, descriptor);\n``` [[01;35m[K-Wdeprecated-declarations[m[K]
  145 |   this->declare_parameter("sensors.bumper_1"[01;35m[K)[m[K;
      |                                             [01;35m[K^[m[K
In file included from [01m[K/opt/ros/galactic/include/rclcpp/executors/single_threaded_executor.hpp:28[m[K,
                 from [01m[K/opt/ros/galactic/include/rclcpp/executors.hpp:22[m[K,
                 from [01m[K/opt/ros/galactic/include/rclcpp/rclcpp.hpp:156[m[K,
                 from [01m[K/home/kyle/testWS/src/turtlebot3/turtlebot3/turtlebot3_node/include/turtlebot3_node/turtlebot3.hpp:22[m[K,
                 from [01m[K/home/kyle/testWS/src/turtlebot3/turtlebot3/turtlebot3_node/src/turtlebot3.cpp:17[m[K:
[01m[K/opt/ros/galactic/include/rclcpp/node.hpp:422:3:[m[K [01;36m[Knote: [m[Kdeclared here
  422 |   [01;36m[Kdeclare_parameter[m[K(const std::string & name);
      |   [01;36m[K^~~~~~~~~~~~~~~~~[m[K
[01m[K/home/kyle/testWS/src/turtlebot3/turtlebot3/turtlebot3_node/src/turtlebot3.cpp:146:45:[m[K [01;35m[Kwarning: [m[Kâ€˜[01m[Kconst rclcpp::ParameterValue& rclcpp::Node::declare_parameter(const string&)[m[Kâ€™ is deprecated: declare_parameter() with only a name is deprecated and will be deleted in the future.\nIf you want to declare a parameter that won't change type without a default value use:\n`node->declare_parameter<ParameterT>(name)`, where e.g. ParameterT=int64_t.\n\nIf you want to declare a parameter that can dynamically change type use:\n```\nrcl_interfaces::msg::ParameterDescriptor descriptor;\ndescriptor.dynamic_typing = true;\nnode->declare_parameter(name, rclcpp::ParameterValue{}, descriptor);\n``` [[01;35m[K-Wdeprecated-declarations[m[K]
  146 |   this->declare_parameter("sensors.bumper_2"[01;35m[K)[m[K;
      |                                             [01;35m[K^[m[K
In file included from [01m[K/opt/ros/galactic/include/rclcpp/executors/single_threaded_executor.hpp:28[m[K,
                 from [01m[K/opt/ros/galactic/include/rclcpp/executors.hpp:22[m[K,
                 from [01m[K/opt/ros/galactic/include/rclcpp/rclcpp.hpp:156[m[K,
                 from [01m[K/home/kyle/testWS/src/turtlebot3/turtlebot3/turtlebot3_node/include/turtlebot3_node/turtlebot3.hpp:22[m[K,
                 from [01m[K/home/kyle/testWS/src/turtlebot3/turtlebot3/turtlebot3_node/src/turtlebot3.cpp:17[m[K:
[01m[K/opt/ros/galactic/include/rclcpp/node.hpp:422:3:[m[K [01;36m[Knote: [m[Kdeclared here
  422 |   [01;36m[Kdeclare_parameter[m[K(const std::string & name);
      |   [01;36m[K^~~~~~~~~~~~~~~~~[m[K
[01m[K/home/kyle/testWS/src/turtlebot3/turtlebot3/turtlebot3_node/src/turtlebot3.cpp:148:49:[m[K [01;35m[Kwarning: [m[Kâ€˜[01m[Kconst rclcpp::ParameterValue& rclcpp::Node::declare_parameter(const string&)[m[Kâ€™ is deprecated: declare_parameter() with only a name is deprecated and will be deleted in the future.\nIf you want to declare a parameter that won't change type without a default value use:\n`node->declare_parameter<ParameterT>(name)`, where e.g. ParameterT=int64_t.\n\nIf you want to declare a parameter that can dynamically change type use:\n```\nrcl_interfaces::msg::ParameterDescriptor descriptor;\ndescriptor.dynamic_typing = true;\nnode->declare_parameter(name, rclcpp::ParameterValue{}, descriptor);\n``` [[01;35m[K-Wdeprecated-declarations[m[K]
  148 |   this->declare_parameter("sensors.illumination"[01;35m[K)[m[K;
      |                                                 [01;35m[K^[m[K
In file included from [01m[K/opt/ros/galactic/include/rclcpp/executors/single_threaded_executor.hpp:28[m[K,
                 from [01m[K/opt/ros/galactic/include/rclcpp/executors.hpp:22[m[K,
                 from [01m[K/opt/ros/galactic/include/rclcpp/rclcpp.hpp:156[m[K,
                 from [01m[K/home/kyle/testWS/src/turtlebot3/turtlebot3/turtlebot3_node/include/turtlebot3_node/turtlebot3.hpp:22[m[K,
                 from [01m[K/home/kyle/testWS/src/turtlebot3/turtlebot3/turtlebot3_node/src/turtlebot3.cpp:17[m[K:
[01m[K/opt/ros/galactic/include/rclcpp/node.hpp:422:3:[m[K [01;36m[Knote: [m[Kdeclared here
  422 |   [01;36m[Kdeclare_parameter[m[K(const std::string & name);
      |   [01;36m[K^~~~~~~~~~~~~~~~~[m[K
[01m[K/home/kyle/testWS/src/turtlebot3/turtlebot3/turtlebot3_node/src/turtlebot3.cpp:150:39:[m[K [01;35m[Kwarning: [m[Kâ€˜[01m[Kconst rclcpp::ParameterValue& rclcpp::Node::declare_parameter(const string&)[m[Kâ€™ is deprecated: declare_parameter() with only a name is deprecated and will be deleted in the future.\nIf you want to declare a parameter that won't change type without a default value use:\n`node->declare_parameter<ParameterT>(name)`, where e.g. ParameterT=int64_t.\n\nIf you want to declare a parameter that can dynamically change type use:\n```\nrcl_interfaces::msg::ParameterDescriptor descriptor;\ndescriptor.dynamic_typing = true;\nnode->declare_parameter(name, rclcpp::ParameterValue{}, descriptor);\n``` [[01;35m[K-Wdeprecated-declarations[m[K]
  150 |   this->declare_parameter("sensors.ir"[01;35m[K)[m[K;
      |                                       [01;35m[K^[m[K
In file included from [01m[K/opt/ros/galactic/include/rclcpp/executors/single_threaded_executor.hpp:28[m[K,
                 from [01m[K/opt/ros/galactic/include/rclcpp/executors.hpp:22[m[K,
                 from [01m[K/opt/ros/galactic/include/rclcpp/rclcpp.hpp:156[m[K,
                 from [01m[K/home/kyle/testWS/src/turtlebot3/turtlebot3/turtlebot3_node/include/turtlebot3_node/turtlebot3.hpp:22[m[K,
                 from [01m[K/home/kyle/testWS/src/turtlebot3/turtlebot3/turtlebot3_node/src/turtlebot3.cpp:17[m[K:
[01m[K/opt/ros/galactic/include/rclcpp/node.hpp:422:3:[m[K [01;36m[Knote: [m[Kdeclared here
  422 |   [01;36m[Kdeclare_parameter[m[K(const std::string & name);
      |   [01;36m[K^~~~~~~~~~~~~~~~~[m[K
[01m[K/home/kyle/testWS/src/turtlebot3/turtlebot3/turtlebot3_node/src/turtlebot3.cpp:152:42:[m[K [01;35m[Kwarning: [m[Kâ€˜[01m[Kconst rclcpp::ParameterValue& rclcpp::Node::declare_parameter(const string&)[m[Kâ€™ is deprecated: declare_parameter() with only a name is deprecated and will be deleted in the future.\nIf you want to declare a parameter that won't change type without a default value use:\n`node->declare_parameter<ParameterT>(name)`, where e.g. ParameterT=int64_t.\n\nIf you want to declare a parameter that can dynamically change type use:\n```\nrcl_interfaces::msg::ParameterDescriptor descriptor;\ndescriptor.dynamic_typing = true;\nnode->declare_parameter(name, rclcpp::ParameterValue{}, descriptor);\n``` [[01;35m[K-Wdeprecated-declarations[m[K]
  152 |   this->declare_parameter("sensors.sonar"[01;35m[K)[m[K;
      |                                          [01;35m[K^[m[K
In file included from [01m[K/opt/ros/galactic/include/rclcpp/executors/single_threaded_executor.hpp:28[m[K,
                 from [01m[K/opt/ros/galactic/include/rclcpp/executors.hpp:22[m[K,
                 from [01m[K/opt/ros/galactic/include/rclcpp/rclcpp.hpp:156[m[K,
                 from [01m[K/home/kyle/testWS/src/turtlebot3/turtlebot3/turtlebot3_node/include/turtlebot3_node/turtlebot3.hpp:22[m[K,
                 from [01m[K/home/kyle/testWS/src/turtlebot3/turtlebot3/turtlebot3_node/src/turtlebot3.cpp:17[m[K:
[01m[K/opt/ros/galactic/include/rclcpp/node.hpp:422:3:[m[K [01;36m[Knote: [m[Kdeclared here
  422 |   [01;36m[Kdeclare_parameter[m[K(const std::string & name);
      |   [01;36m[K^~~~~~~~~~~~~~~~~[m[K
[ 85%] [32m[1mLinking CXX static library libturtlebot3_node_lib.a[0m
[ 85%] Built target turtlebot3_node_lib
[35m[1mScanning dependencies of target turtlebot3_ros[0m
[ 92%] [32mBuilding CXX object CMakeFiles/turtlebot3_ros.dir/src/node_main.cpp.o[0m
[100%] [32m[1mLinking CXX executable turtlebot3_ros[0m
[100%] Built target turtlebot3_ros
-- Install configuration: ""
-- Execute custom install script
-- Symlinking: /home/kyle/testWS/install/turtlebot3_node/share/turtlebot3_node/param/burger.yaml
-- Symlinking: /home/kyle/testWS/install/turtlebot3_node/share/turtlebot3_node/param/waffle.yaml
-- Symlinking: /home/kyle/testWS/install/turtlebot3_node/share/turtlebot3_node/param/waffle_pi.yaml
-- Symlinking: /home/kyle/testWS/install/turtlebot3_node/lib/turtlebot3_node/turtlebot3_ros
-- Symlinking: /home/kyle/testWS/install/turtlebot3_node/share/ament_index/resource_index/package_run_dependencies/turtlebot3_node
-- Symlinking: /home/kyle/testWS/install/turtlebot3_node/share/ament_index/resource_index/parent_prefix_path/turtlebot3_node
-- Symlinking: /home/kyle/testWS/install/turtlebot3_node/share/turtlebot3_node/environment/ament_prefix_path.sh
-- Symlinking: /home/kyle/testWS/install/turtlebot3_node/share/turtlebot3_node/environment/ament_prefix_path.dsv
-- Symlinking: /home/kyle/testWS/install/turtlebot3_node/share/turtlebot3_node/environment/path.sh
-- Symlinking: /home/kyle/testWS/install/turtlebot3_node/share/turtlebot3_node/environment/path.dsv
-- Symlinking: /home/kyle/testWS/install/turtlebot3_node/share/turtlebot3_node/local_setup.bash
-- Symlinking: /home/kyle/testWS/install/turtlebot3_node/share/turtlebot3_node/local_setup.sh
-- Symlinking: /home/kyle/testWS/install/turtlebot3_node/share/turtlebot3_node/local_setup.zsh
-- Symlinking: /home/kyle/testWS/install/turtlebot3_node/share/turtlebot3_node/local_setup.dsv
-- Symlinking: /home/kyle/testWS/install/turtlebot3_node/share/turtlebot3_node/package.dsv
-- Symlinking: /home/kyle/testWS/install/turtlebot3_node/share/ament_index/resource_index/packages/turtlebot3_node
-- Symlinking: /home/kyle/testWS/install/turtlebot3_node/share/turtlebot3_node/cmake/ament_cmake_export_include_directories-extras.cmake
-- Symlinking: /home/kyle/testWS/install/turtlebot3_node/share/turtlebot3_node/cmake/turtlebot3_nodeConfig.cmake
-- Symlinking: /home/kyle/testWS/install/turtlebot3_node/share/turtlebot3_node/cmake/turtlebot3_nodeConfig-version.cmake
-- Symlinking: /home/kyle/testWS/install/turtlebot3_node/share/turtlebot3_node/package.xml
